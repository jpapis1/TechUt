package app.service;

import app.domain.Parrot;

import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

public class ParrotService implements IParrotService {
    private Connection connection;

    private String url = "jdbc:hsqldb:hsql://localhost/workdb";

    private String createTablePerson = "CREATE TABLE Parrot(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(50) unique , dateOfBirth date ," +
            "weight double, isExotic varchar(50))";
    private PreparedStatement deleteParrotStatement;
    private PreparedStatement insertParrotStatement;

    private Statement statement;
    public ParrotService() {
        try {
            connection = DriverManager.getConnection(url);
            statement = connection.createStatement();

            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
            boolean tableExists = false;
            while (rs.next()) {
                if ("Parrot".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    tableExists = true;
                    break;
                }
            }

            if (!tableExists)
                statement.executeUpdate(createTablePerson);

            deleteParrotStatement = connection.prepareStatement("DELETE FROM Parrot WHERE name = ?");
            insertParrotStatement = connection.prepareStatement("INSERT INTO PARROT (name, dateOfBirth, weight, isExotic) VALUES (?,?,?,?)");

        } catch (SQLException e) {
            e.printStackTrace();
        }

    }
    public boolean addParrot(Parrot parrot) {
        try {
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            String dateString = format.format(parrot.getDateOfBirth());
            insertParrotStatement.setString(1,parrot.getName());
            insertParrotStatement.setString(2,dateString);
            insertParrotStatement.setDouble(3,parrot.getWeight());
            insertParrotStatement.setBoolean(4,parrot.isExotic());
            insertParrotStatement.executeUpdate();
            return true;
        } catch (SQLException e) {
            System.out.println("NIE MOŻNA WSTAWIC PAPUGI");
            e.printStackTrace();
        }
        return false;
    }








    public boolean deleteParrot(String parrotName) {
        try {
            deleteParrotStatement.setString(1,parrotName);
            deleteParrotStatement.executeUpdate();
            return true;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    public boolean addListOfParrots(List<Parrot> parrotList) {
        try {
            connection.setAutoCommit(false);
            for (Parrot parrot : parrotList) {
                addParrot(parrot);
            }
            connection.commit();
        } catch (SQLException e) {
            try {
                connection.rollback();
            } catch (SQLException e1) {
                System.out.println("BŁĄD W ROLLBACK!!");
            }
            return false;
        }
        return true;
    }

    public List<Parrot> getAllParrots() {
        try {
            List<Parrot> myList = new ArrayList<Parrot>();

            PreparedStatement selectAllParrotsStatement = connection.prepareStatement("SELECT * FROM PARROT");
            ResultSet rs = selectAllParrotsStatement.executeQuery();
            while (rs.next()) {
                    myList.add(new Parrot(rs.getString(2),
                            rs.getDate(3),
                            rs.getDouble(4),
                            rs.getBoolean(5)));
            }
            return myList;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    public void printAllParrots() {
        try {
            PreparedStatement selectAllParrotsStatement = connection.prepareStatement("SELECT * FROM PARROT");
            ResultSet rs = selectAllParrotsStatement.executeQuery();
            while (rs.next()) {
                System.out.println(new Parrot(rs.getString(2),
                        rs.getDate(3),
                        rs.getDouble(4),
                        rs.getBoolean(5)));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    public List<Parrot> getExoticParrots() {
        try {
            List<Parrot> myList = new ArrayList<Parrot>();

            PreparedStatement selectAllParrotsStatement = connection.prepareStatement("SELECT * FROM PARROT");
            ResultSet rs = selectAllParrotsStatement.executeQuery();
            while (rs.next()) {
                if(rs.getBoolean(5)) {
                    myList.add(new Parrot(rs.getString(2),
                            rs.getDate(3),
                            rs.getDouble(4),
                            rs.getBoolean(5)));
                }
            }
            return myList;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    public Parrot getTheOldestParrot() {
        try {
            List<Parrot> myList = new ArrayList<Parrot>();

            PreparedStatement selectAllParrotsStatement = connection.prepareStatement("SELECT * FROM PARROT");
            ResultSet rs = selectAllParrotsStatement.executeQuery();
            Date oldest = new java.sql.Date(new java.util.Date().getTime());
            Parrot oldestParrot = null;
            while (rs.next()) {
                if(oldest.after(rs.getDate(3))) {
                    oldest = rs.getDate(3);
                    oldestParrot = new Parrot(rs.getString(2),
                            rs.getDate(3),
                            rs.getDouble(4),
                            rs.getBoolean(5));
                }
            }
            return oldestParrot;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

}
